// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

// user truffle assertions for  truffle v5 to handle events.  
const truffleAssert = require('truffle-assertions');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()


        // assign roles to the accounts

        // add farmer to the ledger
        await supplyChain.addFarmer(originFarmerID)

        // add distributor to the ledger
        await supplyChain.addDistributor(distributorID)

        // add retailer to the ledger
        await supplyChain.addRetailer(retailerID)

        // add consumer
        await supplyChain.addConsumer(consumerID)
        
        // instead of using the below for events, use truffle assertions for event
        // Declare and Initialize a variable for event
        // var eventEmitted = false
        // var eventEmitted = true
        
        
        // Watch the emitted event Harvested()
        //SupplyChain.events.event =  supplyChain.Harvested()
        
        // var event = supplyChain.Harvested()
        /*
        await event.watch((err, res) => {
            eventEmitted = true
        })
           end the comment for using  truffle assertions  */
        
        // Mark an item as Harvested by calling function harvestItem()
        // instead of using the method below, get tx object and use it
        //await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)
        let tx = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, productID)
        
        truffleAssert.eventEmitted(tx, 'Harvested', (event) => {

            // return ev.param1 === 1 && ev.param2 === farmerAddress;
            return event.upc == 1;
        
        });
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        console.log("here 1")
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        // assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        // var itemState = 0
        var upc5 = 5
        
        // Watch the emitted event Processed()
          // this is included as part of the next section since truffle assert is used.

        // Mark an item as Processed by calling function processtItem()
        await supplyChain.harvestItem(upc5, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, productID)
        let tx = await supplyChain.processItem(upc5, {from: originFarmerID})
        
        truffleAssert.eventEmitted(tx, 'Processed', (event) => {

            // return ev.param1 === 1 && ev.param2 === farmerAddress;
            return event.upc == upc5;
        
        });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc5)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc5)

        // Verify the result set
        assert.equal(resultBufferOne[1], upc5, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var upc5 = 5
        
        // Watch the emitted event Packed()
        

        // Mark an item as Packed by calling function packItem()
        let tx = await supplyChain.packItem(upc5, {from: originFarmerID})
        
        truffleAssert.eventEmitted(tx, 'Packed', (event) => {

            // return ev.param1 === 1 && ev.param2 === farmerAddress;
            return event.upc == upc5;
        
        });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc5)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc5)

        // Verify the result set
        assert.equal(resultBufferOne[1], upc5, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var upc5 = 5
        
        // Watch the emitted event ForSale()
        

        // Mark an item as ForSale by calling function sellItem()
        let tx = await supplyChain.sellItem(upc5, productPrice, {from: originFarmerID})
        
        truffleAssert.eventEmitted(tx, 'ForSale', (event) => {

            // return ev.param1 === 1 && ev.param2 === farmerAddress;
            return event.upc == upc5;
        
        });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc5)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc5)

        // Verify the result set
       
        assert.equal(resultBufferOne[1], upc5, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Incorrect product price')
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var upc5 = 5
        const paidAmt = web3.utils.toWei("3", "ether")

        var distributorBalBefore = distributorID.balance
        
        // Watch the emitted event Sold() -- not here.  use truffle assertions
        // var event = supplyChain.Sold()
        

        // Mark an item as Sold by calling function buyItem()
        let tx = await supplyChain.buyItem(upc5, {from: distributorID, value: paidAmt})
        
        truffleAssert.eventEmitted(tx, 'Sold', (event) => {
            return event.upc == upc5;
        });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
         // Retrieve the just now saved item from blockchain by calling function fetchItem()
         const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc5)
         const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc5)
         var distributerBalAfter = distributorID.balance

        // Verify the result set
        assert.equal(resultBufferOne[1], upc5, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        // assert.equal((distributerBalAfter - distributorBalBefore), productPrice, 'Error:Distributor payment')

        
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var upc5 = 5
        
        // Watch the emitted event Shipped()
        

        // Mark an item as Shipped by calling function shipItem()
        let tx = await supplyChain.shipItem(upc5, {from: distributorID})
        
        truffleAssert.eventEmitted(tx, 'Shipped', (event) => {
            return event.upc == upc5;
        });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc5)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc5)

        // Verify the result set
        assert.equal(resultBufferOne[1], upc5, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
              
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var upc5 = 5
        
        // Watch the emitted event Received()
        
        // add retailer to the ledger
        // await supplyChain.addRetailer(retailerID)

        // Mark an item as Sold by calling function buyItem()
        let tx = await supplyChain.receiveItem(upc5, {from: retailerID})
        
        truffleAssert.eventEmitted(tx, 'Received', (event) => {
            return event.upc == upc5;
        });
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc5)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc5)

        // Verify the result set
        assert.equal(resultBufferOne[1], upc5, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
             
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var upc5 = 5
        
        // Watch the emitted event Purchased()
        
        // add consumer to the ledger
        // await supplyChain.addConsumer(consumerID)

        // Mark an item as Sold by calling function buyItem()
        let tx = await supplyChain.purchaseItem(upc5, {from: consumerID})
        
        truffleAssert.eventEmitted(tx, 'Purchased', (event) => {
            return event.upc == upc5;
        });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc5)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc5)

        // Verify the result set
        assert.equal(resultBufferOne[1], upc5, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        var upc5 = 5
         const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc5)
 
         // Verify the result set
         
         assert.equal(resultBufferOne[0], sku + 1, 'Error: Invalid item SKU')
         assert.equal(resultBufferOne[1], upc5, 'Error: Invalid item UPC')
         assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
         assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
         assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
         assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
         assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
         assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        
        
        
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        var upc5 = 5
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc5)
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku + 1, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc5, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID')
    })

});

